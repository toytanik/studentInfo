spring.application.name=StudentInformationSystem
spring.datasource.url=jdbc:mysql://localhost:3306/studentInfo
# Username and password
spring.datasource.username=root
spring.datasource.password=Tt1825240*
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
# Using "create" will delete and recreate the tables every time the project is started
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
# Turn off Thymeleaf cache
spring.thymeleaf.cache=false
server.port=8090

spring.security.oauth2.client.registration.github.client-id=b14ceb4d5af8014d0815
spring.security.oauth2.client.registration.github.client-secret=91c71fc7afdcc5a4718c36304c7a990759c93210

# spring.security.oauth2.client.registration.facebook.client-id=dddd
# spring.security.oauth2.client.registration.facebook.client-secret=dddd

# spring.security.oauth2.client.registration.hackerrank.client-id=dddd
# spring.security.oauth2.client.registration.hackerrank.client-secret=dddd

# spring.security.oauth2.client.registration.google.client-id=dddd
# spring.security.oauth2.client.registration.google.client-secret=dddd

server.error.whitelabel.enabled=false
spring.queries.users-query=select email, password, '1' as enabled from user where email=?
spring.queries.roles-query=select u.email, r.role_name from user u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=?



